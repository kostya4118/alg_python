"""
Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами на промежутке
[-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. Улучшенные версии
сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""


import random


def bubble_sort(array):
    count = 0
    while True:
        copy_array = array.copy()
        count += 1
        for i in range(len(array) - 1):
            if array[i] < array[i + 1]:
                array[i], array[i + 1] = array[i + 1], array[i]
        if array == copy_array:
            break
    return count


arr = [i for i in range(-100, 100)]
random.shuffle(arr)
print(f'Исходный массив:\n{arr}\n'
      f'Количество элементов в массиве: {len(arr)}')

n = bubble_sort(arr)
print(f'Отсортированный массив:\n{arr}\n'
      f'Количество циклов функции: {n}')


"""
Благодаря дополнительному сравнению мы избегаем лишних прогонов внешнего цикла, когда массив уже отсортирован 
(перестаёт изменяться), что может существенно сократить время выолнения в сравнении с базовым алгоритмом.
"""